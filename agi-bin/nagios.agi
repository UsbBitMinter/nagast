#!/usr/bin/env perl

use strict;
use warnings;
use Asterisk::AGI;
use File::Copy;
use Data::Dumper;

my $asteriskuser = 'asterisk';
my $shit_hits_fan_at = 4;
my $shit_hits_fan_sample = '/usr/share/nagast/samples/shit_has_hit_the_fan';
my $press_one_to_ack_sample = '/usr/share/nagast/samples/press_one_to_ack';
my $press_pound_to_start_sample = '/usr/share/nagast/samples/press_pound_to_start';
my $thank_you_sample = '/usr/share/nagast/samples/thank_you';

my ($alogin,$apass,$auid,$agid) = getpwnam($asteriskuser) or die "Cannot find user $asteriskuser";
my $AGI = new Asterisk::AGI;

my $outchannel = $ARGV[0];
my $callerid = $ARGV[1];
my $outcid = $ARGV[2];

my $spooldir = '/var/spool/nagiosmessages/';
my $outdir = '/var/spool/asterisk/outgoing/';

sub find_files {
    opendir(my $dh, $spooldir.'/new/');

    my @ret;

    foreach my $msgid (grep { /^$callerid-.*/ } readdir($dh)) {
        $msgid =~ s/\.(wav|gsm|al)//i;
        push(@ret, $msgid);
    }

    if ($#ret >= 0) {
        return @ret;
    } else {
        return 'FALSE';
    }
}

sub get_ack {
    my $tries = 0;
    my $maxtries = 3;

    while ($tries < $maxtries) {
        $tries++;
        my $ack = 0;
        $ack = $AGI->stream_file($press_one_to_ack_sample, 1);

        if ($ack == 0) {
            $ack = $AGI->wait_for_digit(5000);
        }

        if ($ack >= 1) {
            return 1;
        }

    }

    return 0;
}

sub ack_msg {
    my $msg = shift;
    my $uuid = $msg;
    $uuid =~ s/$callerid-//;
    unlink($outdir.'/'.$msg.'.call');
    move($spooldir.'/new/'.$msg.'.al', $spooldir.'/ack/'.$uuid) or $AGI->verbose("Failed to ack message $msg: $!", 1);
    move($spooldir.'/new/'.$msg.'.gsm', $spooldir.'/ack/'.$uuid) or $AGI->verbose("Failed to ack message $msg: $!", 1);
}

sub get_active_call {
    my $tries = 0;
    my $maxtries = 3;

    while ($tries < $maxtries) {
        $tries++;
        my $ack = 0;
        $ack = $AGI->stream_file($press_pound_to_start_sample,'#');

        if ($ack == 0) {
            $ack = $AGI->wait_for_digit(3000);
        }

        if ($ack >= 1) {
            return 1;
        }
    }

    return 0;
}

sub requeue {


    my $tmpfile = $spooldir.'/'.$callerid.'.call';
    my $dstfile = $outdir.'/'.$callerid.'.call';
    open TMPFILE, "+>$tmpfile";
    print TMPFILE 'Channel:', $outchannel.'/'.$callerid."\n";
    print TMPFILE 'CallerID: "Nagast <'.$outcid.'>"'."\n";
    print TMPFILE 'MaxRetries: 3'."\n";
    print TMPFILE 'RetryTime: 60'."\n";
    print TMPFILE 'WaitTime: 45'."\n";
    print TMPFILE 'Application: AGI'."\n";
    print TMPFILE 'Data: nagios.agi,'.$outchannel.','.$callerid.','.$outcid."\n";
    close(TMPFILE);

    move($tmpfile, $dstfile) or die "Move failed $!";
    chown($auid,$agid,$dstfile);

    $AGI->verbose("Requeued to $dstfile", 1);
    $AGI->hangup();
    exit;
}

my @queuedmsg = find_files();

if ($#queuedmsg >= 0 && get_active_call() == 0) {
    $AGI->verbose("Nobody bothered to pickup or press the pound key. Hangup and try again.", 1);

    sleep 1;

    requeue();
}


if ($#queuedmsg >= $shit_hits_fan_at) {
    $AGI->stream_file($shit_hits_fan_sample, '#');

    if (get_ack() == 1) {
        while (find_files() ne "FALSE") {
            @queuedmsg = find_files();
            foreach my $message (@queuedmsg) {
                ack_msg($message);
            }
        }
    }
} elsif ($#queuedmsg >= 0) {
    while (find_files() ne "FALSE") {
        @queuedmsg = find_files();
        foreach my $message (@queuedmsg) {
            $AGI->stream_file($spooldir.'/new/'.$message, '#');
            if (get_ack() == 1) {
                ack_msg($message);
            } else {
                requeue();
            }
        }
    }
} else {
    $AGI->hangup();
}

$AGI->stream_file($thank_you_sample);
