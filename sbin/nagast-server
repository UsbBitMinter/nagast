#!/usr/bin/env perl

use strict;
use warnings;
use IO::Socket::SSL;
use Data::Dumper;
use Digest::MD5 qw(md5_hex);
use Getopt::Long;
use CGI::Util qw(escape);
use LWP::UserAgent;
use LWP::ConnCache;
use File::Copy;

$| = 1;

my $asteriskuser = 'asterisk';
my $calltimeout = 45;
my %callqueue;
my %seennode;
my $mode;
my $help;
my $lport = 10042;
my $laddress = '::';
my $outchannel = 'SIP';
my $outcid = '';
my $adminphone = '';
my $language = 'en';
my $spooldir = '/var/spool/nagiosmessages/';
my $outdir = '/var/spool/asterisk/outgoing/';
my $sslcert = '/etc/ssl/certs/ssl-cert-snakeoil.pem';
my $sslkey  = '/etc/ssl/private/ssl-cert-snakeoil.key';

my $speed   = 1.1;
my $tmpdir  = "/tmp";
my $timeout = 10;
my $url     = "http://translate.google.com/translate_tts";
my $mpg123  = `/usr/bin/which mpg123`;
my $sox     = `/usr/bin/which sox`;

chomp($mpg123, $sox);

sub usage {
    warn "`nagast-server` takes the following options:
--help                     (optional, this help and exit)
--laddress <listenhost>    (optional, defaults to ::)
--lport <listenport>       (optional, defaults to 10041)
--sslcert <pathtocert>     (optional, defaults to $sslcert)
--sslkey <pathtokey>       (optional, defaults to $sslkey)
--outchannel <channel for outgoing calls>
                           (optional, defaults to SIP)
--outcid <outgoing callerid)
                           (required)
--adminphone <admin phonenumer>
                           (required, will be called if nodes get lost)
--lang <isocode>           (optional, defaults to en)
\n";
    exit 3;
}
my $optres = GetOptions(
    "help" => \$help,
    "lport=i" => \$lport,
    "laddress=s" => \$laddress,
    "lang=s" => \$language,
    "sslcert=s" => \$sslcert,
    "sslkey=s" => \$sslkey,
    "outchannel=s" => \$outchannel,
    "outcid=s" => \$outcid,
    "adminphone=s" => \$adminphone,
    );

if (defined($help)) {
    usage();
}

if (!defined($outcid) || $outcid eq "" || !defined($adminphone) || $adminphone eq "") {
    usage();
}

my ($alogin,$apass,$auid,$agid) = getpwnam($asteriskuser) or die "Cannot find user $asteriskuser";

my ($ssock, $iconn, $oconn);

if(!($ssock = IO::Socket::SSL->new(
        Listen => 5,
        LocalAddr => $laddress,
        LocalPort => $lport,
        Proto     => 'tcp',
        Reuse     => 1,
        SSL_key_file => $sslkey,
        SSL_cert_file => $sslcert,
        SSL_verify_mode => 0x01,
        )) ) {
    warn "unable to create socket: ", &IO::Socket::SSL::errstr, "\n";
    exit(0);
}

$SIG{ALRM} = sub {
    foreach my $uuid (keys(%callqueue)) {
        my $number = $callqueue{$uuid};
        my $sample = $spooldir.'/new/'.$number.'-'.$uuid.'.gsm';

        unless (-e $sample) {
            delete($callqueue{$uuid});
            next;
        }

        my $tmpfile = $spooldir.'/'.$uuid.'.call';
        my $dstfile = $outdir.'/'.$number.'.call';
        open TMPFILE, "+>$tmpfile";
        print TMPFILE 'Channel:', $outchannel.'/'.$number."\n";
        print TMPFILE 'CallerID: "Nagast <'.$outcid.'>"'."\n";
        print TMPFILE 'MaxRetries: 3'."\n";
        print TMPFILE 'RetryTime: 60'."\n";
        print TMPFILE 'WaitTime: 45'."\n";
        print TMPFILE 'Application: AGI'."\n";
        print TMPFILE 'Data: nagios.agi,'.$outchannel.','.$number.','.$outcid."\n";
        close(TMPFILE);

        if (-e $dstfile) {
            unlink($tmpfile);
            next;
        }

        move($tmpfile, $dstfile) or die "Move failed $!";
        chown($auid,$agid,$dstfile);
        delete($callqueue{$uuid});
    }

    my $now = time();

    foreach my $node (keys %seennode) {
        my $interval = $seennode{$node}{'interval'}*2;
        if ($now-$seennode{$node}{'lastseen'} > $interval) {
            master_process_command(undef, ('SERVICE Nagast', 'HOST Enoclue', 'STATE Critical', 'NEWCALL '.$adminphone));
            delete($seennode{$node});
        }
    }

    alarm $calltimeout;
};

alarm $calltimeout;

sub find_ack {
    my ($ackhost) = @_;
    opendir(my $dh, $spooldir.'/ack/');

    my @ret;

    foreach my $msgid (grep { /.*_$ackhost$/ } readdir($dh)) {
        $msgid =~ s/_$ackhost//i;
        push(@ret, $msgid);
    }

    return @ret;
}

sub handle_ping {
    my ($cs, $message) = @_;

    $message =~ m/PING (\d+) ([^ ]+)/;
    my $interval = $1;
    my $hostname = $2;

    if ((!defined($interval) || $interval eq "") ||
        (!defined($hostname) || $hostname eq "")) {
        respond($cs, 'INSUFPARAM');
        return;
    }

    $seennode{$hostname}{'interval'} = $interval;
    $seennode{$hostname}{'lastseen'} = time();

    foreach my $ack (find_ack($hostname)) {
        print $cs 'ACKED '.$ack."\n";
        unlink($spooldir.'/ack/'.$ack.'_'.$hostname);
    }
    respond($cs, 'PONG');
}

sub respond {
    my ($cs, $rcode) = @_;

    if (!defined($cs)) {
        return;
    }

    my $responds = {
        'ACK' => '200 ACK',
        'PONG' => '200 THANKS FOR PINGING',
        'FATAL' => '500 FATAL ERROR',
        'U_FATAL' => '500 UNKNOWN FATAL ERROR',
        'INSUFPARAM' => '500 INSUFFICIENT PARAMETERS',
        'RETRY' => '400 TRY AGAIN LATER',
        'UNKN' => '500 THE SERVER RETURNED AN UNKNOWN ERRORCODE',
        'EPROXY' => '503 PROXY ERROR. COULD NOT REACH MASTER',
    };

    if (defined($responds->{$rcode})) {
        print $cs $responds->{$rcode}."\n";
    } else {
        print $cs $responds->{'UNKN'}.": $rcode";
    }
}

sub master_process_command {
    my ($cs, @command) = @_;
    my (%vars, $outline, @text, @mp3list, @soxargs);

    foreach (@command) {
        my ($var, $val) = split(/\W/, $_, 2);
        $vars{$var} = $val;
    }

    if (!defined($vars{'NEWCALL'}) || !defined($vars{'ID'})) {
        respond($cs, 'FATAL');
        return;
    }

    if (defined($vars{'SERVICE'})) {
        $outline = 'Service '.$vars{'SERVICE'}.' on host '.$vars{'HOST'}. ' has state: '.$vars{'STATE'}.'.';
    } else {
        $outline = 'Host '.$vars{'HOST'}. ' is '.$vars{'STATE'}.'.';
    }

    for ($outline) {
        # Split input to comply with google tts requirements #
        s/[\\|*~<>^\n\(\)\[\]\{\}[:cntrl:]]/ /g;
        s/\s+/ /g;
        s/^\s|\s$//g;
        $_ .= "." unless (/^.+[.,?!:;]$/);
        @text = /.{1,100}[.,?!:;]|.{1,100}\s/g;
    }

    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla/5.0 (X11; Linux; rv:8.0) Gecko/20100101");
    $ua->env_proxy;
    $ua->conn_cache(LWP::ConnCache->new());
    $ua->timeout($timeout);

    foreach my $line (@text) {
        # Get speech data from google and save them in temp files #
        $line =~ s/^\s+|\s+$//g;
        next if (length($line) == 0);
        $line = escape($line);
        my $mp3_name = "/tmp/".md5_hex($line).'.mp3';
        if (-f $mp3_name) {
            push(@mp3list, $mp3_name);
            next;
        }
        my $request = HTTP::Request->new('GET' => "$url?tl=$language&q=$line");
        my $response = $ua->request($request, $mp3_name);
        if (!$response->is_success) {
            respond('FATAL');
        } else {
            push(@mp3list, $mp3_name);
        }
    }

    respond($cs, 'ACK');

    my $randnr = $vars{'ID'}.'_'.$vars{'HOSTNAME'};
    my $wav_name = "/tmp/".$randnr.".wav";
    system($mpg123, "-q", "-w", $wav_name, @mp3list);

    @soxargs = ($sox, "-q", $wav_name);

    my $tmpfile = $spooldir.'/tmp/'.$randnr.'.gsm';
    my $dstfile = $spooldir.'/new/'.$vars{'NEWCALL'}.'-'.$randnr.'.gsm';
    push(@soxargs, ($tmpfile));
    push(@soxargs, ("tempo", "-s", $speed)) if ($speed != 1);
    push(@soxargs, ("rate", "8000"));

    if (system(@soxargs) == 0) {
        unlink($wav_name);
        move($tmpfile, $dstfile) or die "Move failed $!";
        chown($auid,$agid,$dstfile);

        $callqueue{$randnr} = $vars{'NEWCALL'};
    }

}

sub run_master {
	while (1) {
	    while ($iconn = $ssock->accept()) {
	        my @command;
	        while (my $input = <$iconn>) {
	            chomp($input);
	            if ($input =~ m/^(NEWCALL|HOST|SERVICE|STATE|ID|HOSTNAME) /) {
	                push(@command, $input);
                } elsif ($input =~ m/^PING/) {
	                handle_ping($iconn, $input);
	            } elsif ($input =~ m/^$/) {
	                if ($#command < 2) {
	                    respond($iconn, 'INSUFPARAM');
	                    @command = ();
	                } else {
	                    master_process_command($iconn, @command);
	                    @command = ();
	                }
	            }
	        }
	    }
	}
}

run_master();

$ssock->close();
